{"version":3,"sources":["top.jpg","bottom.jpg","Coin.js","CoinContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Coin","imageSrc","this","props","side","head","tail","react_default","a","createElement","src","alt","Component","CoinContainer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","clickTime","headTime","tailTime","flipCoin","bind","assertThisInitialized","cTime","hTime","tTime","setState","src_Coin_0","onClick","concat","App","className","src_CoinContainer_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qTCczBC,mLAPP,IAAIC,EAASC,KAAKC,MAAMC,KAAOC,IAAOC,IACtC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKT,EAAUU,IAAI,YAJjBC,aC4CJC,qBA5CX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAW,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAb,KAAAa,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjB,QACKkB,MAAQ,CACThB,MAAM,EACNiB,UAAW,EACXC,SAAU,EACVC,SAAU,GAEdT,EAAKU,SAAWV,EAAKU,SAASC,KAAdV,OAAAW,EAAA,EAAAX,CAAAD,IARNA,0EAYV,IAAMa,EAAOzB,KAAKkB,MAAMC,UAAW,EAC/BO,EAAQ1B,KAAKkB,MAAME,SACnBO,EAAQ3B,KAAKkB,MAAMG,SACpBrB,KAAKkB,MAAMhB,KACVyB,IAEAD,IAEJ1B,KAAK4B,SAAS,CACV1B,MAAOF,KAAKkB,MAAMhB,KAClBiB,UAAWM,EACXL,SAAUM,EACVL,SAAUM,qCAKd,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACsB,EAAD,CAAM3B,KAAMF,KAAKkB,MAAMhB,OACvBG,EAAAC,EAAAC,cAAA,UAAQuB,QAAS9B,KAAKsB,UAAtB,iBACAjB,EAAAC,EAAAC,cAAA,mCAAAwB,OAC6B/B,KAAKkB,MAAMC,UADxC,qDAAAY,OAEyB/B,KAAKkB,MAAME,SAFpC,oDAAAW,OAGyB/B,KAAKkB,MAAMG,SAHpC,oBAnCYX,oBCQbsB,MARf,WACE,OACE3B,EAAAC,EAAAC,cAAA,OAAK0B,UAAU,OACb5B,EAAAC,EAAAC,cAAC2B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7cc95b5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/top.99a10729.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bottom.43f803d7.jpg\";","import React, { Component } from 'react';\r\nimport './Coin.css';\r\nimport head from './top.jpg';\r\nimport tail from './bottom.jpg';\r\n\r\nclass Coin extends Component {\r\n    render() {\r\n        let imageSrc=this.props.side ? head : tail;\r\n        return (\r\n            <img src={imageSrc} alt=\"\" />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Coin;","import React, { Component } from 'react';\r\nimport Coin from './Coin';\r\nimport './CoinContainer.css';\r\n\r\nclass CoinContainer extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            side: true,\r\n            clickTime: 0,\r\n            headTime: 1,\r\n            tailTime: 0\r\n        }\r\n        this.flipCoin = this.flipCoin.bind(this);\r\n    }\r\n\r\n    flipCoin() {\r\n        const cTime= this.state.clickTime +1;\r\n        let hTime = this.state.headTime;\r\n        let tTime = this.state.tailTime;\r\n        if(this.state.side) {\r\n            tTime++;\r\n        } else {\r\n            hTime++;\r\n        }\r\n        this.setState({\r\n            side: !this.state.side,\r\n            clickTime: cTime,\r\n            headTime: hTime,\r\n            tailTime: tTime\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Coin Flip</h1>\r\n                <Coin side={this.state.side} />\r\n                <button onClick={this.flipCoin}>Flip The Coin</button>\r\n                <h4>{\r\n                    `Now you have clicked: ${this.state.clickTime} times. \r\n                    The head has shown ${this.state.headTime} times,\r\n                    the tail has shown ${this.state.tailTime} times.`\r\n                }</h4>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CoinContainer;","import React from 'react';\nimport CoinContainer from './CoinContainer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CoinContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}